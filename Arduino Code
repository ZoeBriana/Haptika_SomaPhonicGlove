///Haptika ***THE SOMAPHONE GLOVE!!!***
/*
The Haptika Somaphone Glove is an electronic DIY project which
aims to represent a thereaputic DIY wearable platform to enable a sense of
embodiment and empowerment in special regards to those who are survivors
of trauma and abuse. Through the access, creation, remix, and use of the
Haptika platform, survivors have the potential to RE-member personal trauma
through play, embodiment, and empowerment.
This project in particular aims to mitigate the effects of abuse through remix and redefinition.
This kit has been designed to allow for each finger to act like an instrument by triggering
different sounds or audio samples. The purpose of this project is to redefine trauma landmarks
on the body by revisiting these places and remapping the trauma-infused cartography.
This project aims to equip the user with the means to RE-Member places on their body that
could trigger trauma flashbacks. The project allows the user to be empowered to change the
meaning of this place by making it an instrument for play and exploration, all the while
practicing established embodied practices such as tapping and intentional gesture.
Parts list:
ELECTRONICS:
2x Mini Breadboard
1x Sparkfun Pro Micro (https://www.sparkfun.com/products/12640)
1x Capacitive sense breakout board MPR121
1x Piezo
Copper Tape
Wires
DIY PARTS:
1x Glove
1x velcro or attaching material
Included in this code is Bildr’s code sample
*/
//Wire piezo with one pin to gnd and the other to digital out
//this sketch uses 9 for the piezo
#include “mpr121.h”
#include <Wire.h>
#include “pitches.h”
int irqpin = 5; // Digital 5
boolean touchStates[12]; //to keep track of the previous touch states
void setup(){
pinMode(irqpin, INPUT);
digitalWrite(irqpin, HIGH); //enable pullup resistor
Serial.begin(9600);
Wire.begin();
mpr121_setup();
}
void loop(){
readTouchInputs();
}
void readTouchInputs(){
if(!checkInterrupt()){
//read the touch state from the MPR121
Wire.requestFrom(0x5A,3);
byte LSB = Wire.read();
byte MSB = Wire.read();
uint16_t touched = ((MSB << 8) | LSB); //16bits that make up the touch states
for (int i=0; i < 12; i++){ // Check what electrodes were pressed
if(touched & (1<<i)){
if(touchStates[i] == 0){
//pin i was just touched
Serial.print(“pin “);
Serial.print(i);
Serial.println(” was just touched”);
/////////////////touch commands for piezo////////////
//piezo (pin number, note from “pitches”, duration (1000ms for whole note)
if (touchStates[1]==0 & (i==1)){
tone(9, NOTE_F3, 1000/4); }
if (touchStates[2]==0 & (i==2)){
tone(9, NOTE_G3, 1000/4); }
if (touchStates[3]==0 & (i==3)){
tone(9, NOTE_A3, 1000/4); }
if (touchStates[4]==0 & (i==4)){
tone(9, NOTE_B3, 1000/4);}
if (touchStates[5]==0 & (i==5)){
tone(9, NOTE_C3, 1000/4);}
}else if(touchStates[i] == 1){
//pin i is still being touched
}
touchStates[i] = 1;
}else{
if(touchStates[i] == 1){
Serial.print(“pin “);
Serial.print(i);
Serial.println(” is no longer being touched”);
//pin i is no longer being touched
}
touchStates[i] = 0;
}
}
}
}
void mpr121_setup(void){
set_register(0x5A, ELE_CFG, 0x00);
// Section A – Controls filtering when data is > baseline.
set_register(0x5A, MHD_R, 0x01);
set_register(0x5A, NHD_R, 0x01);
set_register(0x5A, NCL_R, 0x00);
set_register(0x5A, FDL_R, 0x00);
// Section B – Controls filtering when data is < baseline.
set_register(0x5A, MHD_F, 0x01);
set_register(0x5A, NHD_F, 0x01);
set_register(0x5A, NCL_F, 0xFF);
set_register(0x5A, FDL_F, 0x02);
// Section C – Sets touch and release thresholds for each electrode
set_register(0x5A, ELE0_T, TOU_THRESH);
set_register(0x5A, ELE0_R, REL_THRESH);
set_register(0x5A, ELE1_T, TOU_THRESH);
set_register(0x5A, ELE1_R, REL_THRESH);
set_register(0x5A, ELE2_T, TOU_THRESH);
set_register(0x5A, ELE2_R, REL_THRESH);
set_register(0x5A, ELE3_T, TOU_THRESH);
set_register(0x5A, ELE3_R, REL_THRESH);
set_register(0x5A, ELE4_T, TOU_THRESH);
set_register(0x5A, ELE4_R, REL_THRESH);
set_register(0x5A, ELE5_T, TOU_THRESH);
set_register(0x5A, ELE5_R, REL_THRESH);
set_register(0x5A, ELE6_T, TOU_THRESH);
set_register(0x5A, ELE6_R, REL_THRESH);
set_register(0x5A, ELE7_T, TOU_THRESH);
set_register(0x5A, ELE7_R, REL_THRESH);
set_register(0x5A, ELE8_T, TOU_THRESH);
set_register(0x5A, ELE8_R, REL_THRESH);
set_register(0x5A, ELE9_T, TOU_THRESH);
set_register(0x5A, ELE9_R, REL_THRESH);
set_register(0x5A, ELE10_T, TOU_THRESH);
set_register(0x5A, ELE10_R, REL_THRESH);
set_register(0x5A, ELE11_T, TOU_THRESH);
set_register(0x5A, ELE11_R, REL_THRESH);
// Section D
// Set the Filter Configuration
// Set ESI2
set_register(0x5A, FIL_CFG, 0x04);
// Section E
// Electrode Configuration
// Set ELE_CFG to 0x00 to return to standby mode
set_register(0x5A, ELE_CFG, 0x0C); // Enables all 12 Electrodes
// Section F
// Enable Auto Config and auto Reconfig
/*set_register(0x5A, ATO_CFG0, 0x0B);
set_register(0x5A, ATO_CFGU, 0xC9); // USL = (Vdd-0.7)/vdd*256 = 0xC9 @3.3V set_register(0x5A, ATO_CFGL, 0x82); // LSL = 0.65*USL = 0x82 @3.3V
set_register(0x5A, ATO_CFGT, 0xB5);*/ // Target = 0.9*USL = 0xB5 @3.3V
set_register(0x5A, ELE_CFG, 0x0C);
}
boolean checkInterrupt(void){
return digitalRead(irqpin);
}
void set_register(int address, unsigned char r, unsigned char v){
Wire.beginTransmission(address);
Wire.write(r);
Wire.write(v);
Wire.endTransmission();
}
